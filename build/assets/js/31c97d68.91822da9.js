"use strict";(self.webpackChunkpostcodes_io=self.webpackChunkpostcodes_io||[]).push([[2008],{23363:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>b,contentTitle:()=>f,default:()=>x,frontMatter:()=>y,metadata:()=>o,toc:()=>S});const o=JSON.parse('{"id":"api/postcode-lookup","title":"Autocomplete Search a Postcode","description":"Query for a postcode either by:","source":"@site/docs/api/postcode-lookup.api.mdx","sourceDirName":"api","slug":"/api/postcode-lookup","permalink":"/docs/api/postcode-lookup","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"postcode-lookup","title":"Autocomplete Search a Postcode","description":"Query for a postcode either by:","sidebar_label":"Autocomplete Search a Postcode","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"get api-method","info_path":"docs/api/api-reference-postcodes-io","custom_edit_url":null},"sidebar":"openApiSidebar","previous":{"title":"Lookup Postcode","permalink":"/docs/api/lookup-postcode"},"next":{"title":"Find the Nearest Postcodes","permalink":"/docs/api/nearest-postcode"}}');var a=i(74848),r=i(28453),s=i(33617),n=i.n(s),l=i(17543),c=i.n(l),d=i(86013),p=i.n(d),u=i(63723),m=i.n(u),h=(i(18766),i(79329),i(9303));const y={id:"postcode-lookup",title:"Autocomplete Search a Postcode",description:"Query for a postcode either by:",sidebar_label:"Autocomplete Search a Postcode",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"get api-method",info_path:"docs/api/api-reference-postcodes-io",custom_edit_url:null},f=void 0,b={},S=[{value:"Query with Postcode",id:"query-with-postcode",level:2},{value:"Query with Geolocation",id:"query-with-geolocation",level:2}];function g(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(h.default,{as:"h1",className:"openapi__heading",children:"Autocomplete Search a Postcode"}),"\n",(0,a.jsx)(n(),{method:"get",path:"/postcodes",context:"endpoint"}),"\n",(0,a.jsx)(t.p,{children:"Query for a postcode either by:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["The postcode itself (with ",(0,a.jsx)(t.code,{children:"query="}),") or by,"]}),"\n",(0,a.jsxs)(t.li,{children:["A geolocation (",(0,a.jsx)(t.code,{children:"lat="})," and ",(0,a.jsx)(t.code,{children:"lon="}),")."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"query-with-postcode",children:"Query with Postcode"}),"\n",(0,a.jsxs)(t.p,{children:["Submit a postcode query and receive a complete list of postcode matches and all associated postcode data. This is triggered when ",(0,a.jsx)(t.code,{children:"query="})," is supplied."]}),"\n",(0,a.jsx)(t.p,{children:"This is essentially a postcode search which prefix matches and returns postcodes in sorted order (case insensitive)."}),"\n",(0,a.jsxs)(t.p,{children:["This method is space sensitive, i.e. it detects for spaces between outward and inward parts of the postcode (some examples detailed in this ",(0,a.jsx)(t.a,{href:"https://github.com/ideal-postcodes/postcodes.io/issues/44",children:"issue"}),")."]}),"\n",(0,a.jsx)(t.p,{children:"The result set can either be empty or populated with up to 100 postcode entities. Either way it will always return a 200 response code."}),"\n",(0,a.jsx)(t.h2,{id:"query-with-geolocation",children:"Query with Geolocation"}),"\n",(0,a.jsxs)(t.p,{children:["Returns nearest postcodes for a given longitude and latitude. This is triggered when ",(0,a.jsx)(t.code,{children:"lat="})," and ",(0,a.jsx)(t.code,{children:"lon="})," are supplied."]}),"\n",(0,a.jsx)(h.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,a.jsx)(c(),{parameters:[{name:"query",in:"query",style:"form",explode:!1,schema:{description:"Postcode to query. Aliases to `q=`",example:"SW1A 2AA"}},{name:"limit",in:"query",style:"form",explode:!1,description:"Limits number of postcodes matches to return. Defaults to 10. Needs to be less than 100.",schema:{default:10,maximum:100,minimum:1,example:3}},{name:"longitude",in:"query",style:"form",explode:!1,description:"Geographic coordinate that specifies the east-west position of a point",schema:{title:"Longitude",type:"number",format:"double",example:-.127695,maximum:180,minimum:-180}},{name:"latitude",in:"query",style:"form",explode:!1,schema:{title:"Latitude",type:"number",format:"double",description:"Latitude",example:51.50354,maximum:90,minimum:-90}},{name:"radius",in:"query",style:"form",explode:!1,description:"Limits number of postcodes matches to return. Defaults to 100m. Needs to be less than 2,000m.",schema:{title:"Radius",type:"integer",example:500,default:100,maximum:2e3,minimum:1}},{name:"widesearch",in:"query",style:"form",explode:!1,schema:{title:"Widesearch",type:"boolean",description:"Search up to 20km radius, but subject to a maximum of 10 results. Since lookups over a wide area can be very expensive, we've created this method to allow you choose to make the trade off between search radius and number of results. Defaults to false. When enabled, radius and limits over 10 are ignored.",example:"true",default:"false"}},{name:"filter",in:"query",style:"form",explode:!1,schema:{title:"Filter",type:"string",description:"A comma separated whitelist of attributes to be returned in the result object(s), e.g. filter=postcode,longitude,latitude. null responses will continue to return null. If no attributes match the result object, an empty object is returned",example:"postcode"}}]}),"\n",(0,a.jsx)(p(),{title:"Body",body:void 0}),"\n",(0,a.jsx)(m(),{id:void 0,label:void 0,responses:{200:{description:"Success",content:{"application/json":{schema:{title:"Postcodes Response",type:"object",required:["status","result"],properties:{status:{type:"integer",format:"int32",enum:[200]},result:{type:"array",items:{oneOf:[{type:"object",required:["postcode","outcode","incode","quality","eastings","northings","country","nhs_ha","admin_county","admin_district","admin_ward","longitude","latitude","parliamentary_constituency","european_electoral_region","primary_care_trust","region","parish","lsoa","msoa","ced","ccg","nuts","codes"],properties:{postcode:{title:"Postcode",type:"string",description:"UK postcode format: 2-4 character outward code, a space, and a 3-character inward code (e.g., SW1A 2AA). Updated monthly from Royal Mail.",example:"SW1A 2AA"},outcode:{title:"Outward Code",type:"string",description:"The first part of a postcode before the space (2-4 characters). This generally identifies the postal town or district.",example:"SW1A"},incode:{title:"Inward Code",type:"string",description:"The second part of a postcode after the space (always 3 characters). Helps identify specific streets or buildings within a postal area.",example:"1AA"},quality:{title:"Positional Quality",type:"integer",description:"Indicates accuracy of the grid reference location:\n\n* 1: Within the actual building (most accurate)\n* 2: Same as 1, but verified by Landline maps (Scotland only)\n* 3: Approximate location within 50m\n* 4: Postcode unit mean (averaged from addresses with same postcode)\n* 5: Estimated by ONS using surrounding postcodes\n* 6: Postcode sector mean (mainly PO Boxes)\n* 8: Historical postcode (pre-Gridlink\xae)\n* 9: No grid reference available\n",example:1},eastings:{title:"Eastings",type:"integer",format:"int32",nullable:!0,description:"Ordnance Survey grid reference easting (X-coordinate) with 1-meter resolution. May be null if geolocation unavailable.",example:530047},northings:{title:"Northings",type:"integer",format:"int32",nullable:!0,description:"Ordnance Survey grid reference northing (Y-coordinate) with 1-meter resolution. May be null if geolocation unavailable.",example:179951},country:{title:"Country",type:"string",description:"The UK constituent country for this postcode (England, Scotland, Wales, Northern Ireland, Channel Islands, or Isle of Man).",example:"England"},nhs_ha:{title:"Strategic Health Authority",type:"string",nullable:!0,description:"The NHS health authority area for this postcode.",example:"London"},admin_county:{title:"County",type:"string",nullable:!0,description:"The administrative county for this postcode. May be empty for areas without county-level administration.",example:""},admin_district:{title:"District",type:"string",nullable:!0,description:"The administrative district or unitary authority for this postcode.",example:"Westminster"},admin_ward:{title:"Ward",type:"string",nullable:!0,description:"The electoral/administrative ward for this postcode.",example:"St. James's"},longitude:{title:"Longitude",type:"number",format:"double",nullable:!0,description:"WGS84 longitude coordinate (east-west position). May be null if geolocation unavailable.",example:-.12767},latitude:{title:"Latitude",type:"number",format:"double",nullable:!0,description:"WGS84 latitude coordinate (north-south position). May be null if geolocation unavailable.",example:51.503541},parliamentary_constituency:{title:"Westminster Parliamentary Constituency",type:"string",nullable:!0,description:"The UK Parliamentary constituency for this postcode.",example:"Cities of London and Westminster"},european_electoral_region:{title:"European Electoral Region (EER)",type:"string",nullable:!0,description:"The European Electoral Region for this postcode.",example:"London"},primary_care_trust:{title:"Primary Care Trust (PCT)",type:"string",nullable:!0,description:"The healthcare administrative area for this postcode. Different naming conventions apply across UK regions.",example:"Westminster"},region:{title:"Region",type:"string",nullable:!0,description:"The regional designation for this postcode (formerly Government Office Regions or GORs).",example:"London"},parish:{title:"Parish/Community",type:"string",nullable:!0,description:"The civil parish (England) or community (Wales) for this postcode.",example:"Westminster, unparished area"},lsoa:{title:"Lower Layer Super Output Area",type:"string",nullable:!0,description:"2011 Census LSOA code (smaller statistical area, typically 1,000-1,500 residents).",example:"Westminster 018C"},msoa:{title:"Middle Layer Super Output Area",type:"string",nullable:!0,description:"2011 Census MSOA code (mid-size statistical area, typically 5,000-7,000 residents).",example:"Westminster 018"},ced:{title:"County Electoral District",type:"string",nullable:!0,description:"The county electoral division for English postcodes. Will be null for postcodes without a grid reference or in other UK regions.",example:null},ccg:{title:"Clinical Commissioning Group",type:"string",nullable:!0,description:"NHS Clinical Commissioning Group responsible for planning healthcare services in England.",example:"NHS North West London"},nuts:{title:"International Territorial Levels (ITL)",type:"string",nullable:!0,description:'Statistical geography code for international comparisons (formerly NUTS - Nomenclature of Units for Territorial Statistics).\n\nAs of January 2021, following Brexit, NUTS was replaced by ITL (International Territorial Levels) in the UK.\nFor backward compatibility, Postcodes.io continues to provide this data under the "nuts" field name.',example:"Westminster"},codes:{title:"Administrative Codes",type:"object",description:"Standard 9-character codes (ONS/GSS) for various administrative boundaries. Useful for data linking with official statistics.",properties:{admin_district:{title:"District GSS Code",type:"string",nullable:!0,description:"Official 9-character GSS code for this administrative district.",example:"E09000033"},admin_county:{title:"County GSS Code",type:"string",nullable:!0,description:"Official 9-character GSS code for this administrative county.",example:"E99999999"},admin_ward:{title:"Ward GSS Code",type:"string",nullable:!0,description:"Official 9-character GSS code for this administrative ward.",example:"E05013806"},parish:{title:"Parish GSS Code",type:"string",nullable:!0,description:"Official 9-character GSS code for this parish.",example:"E43000236"},ccg:{title:"CCG GSS Code",type:"string",nullable:!0,description:"Official 9-character GSS code for this Clinical Commissioning Group.",example:"E38000256"},ccg_id:{title:"CCG ID",type:"string",nullable:!0,description:"Short code identifier for this Clinical Commissioning Group.",example:"W2U3Z"},ced:{title:"CED GSS Code",type:"string",nullable:!0,description:"Official 9-character GSS code for this County Electoral District.",example:"E99999999"},nuts:{title:"ITL Code",type:"string",nullable:!0,description:"Official code for this International Territorial Level area.",example:"TLI32"},lau2:{title:"LAU2 Code",type:"string",nullable:!0,description:"Local Administrative Unit level 2 code for this area.",example:"E09000033"},lsoa:{title:"LSOA GSS Code",type:"string",nullable:!0,description:"Official 9-character GSS code for this Lower Layer Super Output Area.",example:"E01004736"},msoa:{title:"MSOA GSS Code",type:"string",nullable:!0,description:"Official 9-character GSS code for this Middle Layer Super Output Area.",example:"E02000977"}}}},title:"Postcode"}]},description:"Array containing detailed location information for the requested postcode or nearest postcodes"}}}}}}}})]})}function x(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}}}]);
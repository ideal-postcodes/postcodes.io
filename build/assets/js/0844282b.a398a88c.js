"use strict";(self.webpackChunkpostcodes_io=self.webpackChunkpostcodes_io||[]).push([[2997],{10234:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"outcode/reverse-geocode","title":"Reverse Geocode an Outcode","description":"This endpoint returns the nearest outcodes for a given longitude and latitude coordinate pair.","source":"@site/docs/outcode/reverse-geocode.mdx","sourceDirName":"outcode","slug":"/outcode/reverse-geocode","permalink":"/docs/outcode/reverse-geocode","draft":false,"unlisted":false,"editUrl":"https://github.com/ideal-postcodes/postcodes.io/docs/outcode/reverse-geocode.mdx","tags":[],"version":"current","frontMatter":{"sidebar_label":"Reverse Geocode","title":"Reverse Geocode an Outcode"},"sidebar":"docsSidebar","previous":{"title":"Lookup","permalink":"/docs/outcode/lookup"},"next":{"title":"Nearest","permalink":"/docs/outcode/nearest"}}');var d=n(74848),r=n(28453);const i={sidebar_label:"Reverse Geocode",title:"Reverse Geocode an Outcode"},o=void 0,c={},a=[{value:"Endpoint",id:"endpoint",level:2},{value:"Example Request",id:"example-request",level:2},{value:"Example Response",id:"example-response",level:2},{value:"Request Parameters",id:"request-parameters",level:2},{value:"Optional Query Parameters",id:"optional-query-parameters",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.p,{children:"This endpoint returns the nearest outcodes for a given longitude and latitude coordinate pair."}),"\n",(0,d.jsxs)(t.p,{children:["Each outcode in the results includes a ",(0,d.jsx)(t.code,{children:"distance"})," field that indicates the distance in meters from the specified coordinates to the outcode."]}),"\n",(0,d.jsx)(t.h2,{id:"endpoint",children:"Endpoint"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-javascript",children:"GET https://api.postcodes.io/outcodes?lon=[longitude]&lat=[latitude]\n"})}),"\n",(0,d.jsx)(t.h2,{id:"example-request",children:"Example Request"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-http",children:"https://api.postcodes.io/outcodes?lon=-0.127&lat=51.507\n"})}),"\n",(0,d.jsx)(t.h2,{id:"example-response",children:"Example Response"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-javascript",children:'{\n  "status": 200,\n  "result": [\n    {\n      "outcode": "SW1A",\n      "longitude": -0.127325,\n      "latitude": 51.501009,\n      "northings": 179951,\n      "eastings": 529825,\n      "admin_district": [\n        "Westminster"\n      ],\n      "parish": [\n        "Westminster, unparished area"\n      ],\n      "admin_county": [],\n      "admin_ward": [\n        "St James\'s",\n        "Vincent Square"\n      ],\n      "country": [\n        "England"\n      ],\n      "distance": 672.3056261\n    }\n    // Truncated for brevity\n  ]\n}\n'})}),"\n",(0,d.jsx)(t.h2,{id:"request-parameters",children:"Request Parameters"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Parameter"}),(0,d.jsx)(t.th,{children:"Required"}),(0,d.jsx)(t.th,{children:"Description"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"lon"})}),(0,d.jsx)(t.td,{children:"Yes"}),(0,d.jsx)(t.td,{children:"The longitude coordinate. Must be a valid WGS84 longitude value between -180 and 180."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"lat"})}),(0,d.jsx)(t.td,{children:"Yes"}),(0,d.jsx)(t.td,{children:"The latitude coordinate. Must be a valid WGS84 latitude value between -90 and 90."})]})]})]}),"\n",(0,d.jsx)(t.h2,{id:"optional-query-parameters",children:"Optional Query Parameters"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Parameter"}),(0,d.jsx)(t.th,{children:"Description"}),(0,d.jsx)(t.th,{children:"Default"}),(0,d.jsx)(t.th,{children:"Constraints"}),(0,d.jsx)(t.th,{children:"Example"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"limit"})}),(0,d.jsx)(t.td,{children:"Limits number of outcode matches to return"}),(0,d.jsx)(t.td,{children:"10"}),(0,d.jsx)(t.td,{children:"Maximum value is 100"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"&limit=5"})})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"radius"})}),(0,d.jsx)(t.td,{children:"Sets search radius in meters"}),(0,d.jsx)(t.td,{children:"5,000m"}),(0,d.jsx)(t.td,{children:"Maximum value is 25,000m"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"&radius=10000"})})]})]})]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(96540);const d={},r=s.createContext(d);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);